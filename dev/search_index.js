var documenterSearchIndex = {"docs":
[{"location":"examples/lorenz63/#Lorenz-'63-system-1","page":"Lorenz63 system","title":"Lorenz '63 system","text":"","category":"section"},{"location":"examples/lorenz63/#","page":"Lorenz63 system","title":"Lorenz63 system","text":"beginalign*\nd X_t = a (Y_t - X_t) dt + sigma_x dW^(1)_t \ndY_t = X_t (b - Z_t) - Y_tdt + sigma_y dW^(2)_t\ndZ_t = X_t Y_t - c Z_tdt + dW^(3)_t\nendalign*","category":"page"},{"location":"examples/sir/#Sine-diffusion-1","page":"SIR model","title":"Sine diffusion","text":"","category":"section"},{"location":"examples/sir/#","page":"SIR model","title":"SIR model","text":"d X_t = a + bsin(c + X_t)dt + sigma dW_tquad tin0Tquad X_0=x_0","category":"page"},{"location":"examples/lorenz96/#Lorenz-'96-system-1","page":"Lorenz96 system","title":"Lorenz '96 system","text":"","category":"section"},{"location":"examples/lorenz96/#","page":"Lorenz96 system","title":"Lorenz96 system","text":"dX_t = b_theta(X_t)dt + Sigma dW_tquad tin0Tquad X_0=x_0","category":"page"},{"location":"examples/lorenz96/#","page":"Lorenz96 system","title":"Lorenz96 system","text":"where X and W are d-dimensional, Sigma is a d by d diagonal matrix and b is given by:","category":"page"},{"location":"examples/lorenz96/#","page":"Lorenz96 system","title":"Lorenz96 system","text":"b^i_theta(x)= (x^i+1-x^i-2)x^i-1-x^i+theta","category":"page"},{"location":"examples/lorenz96/#","page":"Lorenz96 system","title":"Lorenz96 system","text":"where iin1dotsd is a cycling  index.","category":"page"},{"location":"examples/fitzhugh_nagumo/#FitzHugh-Nagumo-model-1","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"A model developed to mimic the evolution of a membrane potential. Originally, it has been developed as a modification to the Van der Pol oscillator.","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"Three parametrisations of the process are provided in the package.","category":"page"},{"location":"examples/fitzhugh_nagumo/#Regular-1","page":"FitzHugh-Nagumo model","title":"Regular","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"Defined simply as FitzHughNagumo is a solution (Y,X) to the following stochastic differential equation:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd Y_t = frac1epsilonleft( Y_t - Y_t^3-X_t + s right )dt\ndX_t = left( gamma Y_t - X_t + beta right )dt + sigma dW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"It can be called with","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"@load_diffusion :FitzHughNagumo","category":"page"},{"location":"examples/fitzhugh_nagumo/#Alternative-1","page":"FitzHugh-Nagumo model","title":"Alternative","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The stochastic differential equation above is re-parametrised in such a way that the first coordinate is given by the integrated second coordinate:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd Y_t = dotY_t dt\nddotY_t = frac1epsilonleft( (1-gamma)Y_t -Y_t^3 -epsilon dotY_t + s - beta + left( 1-3Y_t^2 right)dotY_t right)dt + fracsigmaepsilondW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The process can be called with","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"@load_diffusion :FitzHughNagumoAlt","category":"page"},{"location":"examples/fitzhugh_nagumo/#Conjugate-1","page":"FitzHugh-Nagumo model","title":"Conjugate","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"It is defined analogously to alternative parametrisation, the only difference being that an additional step is taken of redefining the parameters:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"sleftarrow fracsepsilonquad betaleftarrowfracbetaepsilonquad sigmaleftarrowfracsigmaepsilonquad gammaleftarrowfracgammaepsilonquad epsilonleftarrowfrac1epsilon","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"This results in the target law of the form:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd Y_t = dotY_t dt\nddotY_t = left( (epsilon-gamma)Y_t -epsilon Y_t^3 -dotY_t + s - beta + epsilonleft( 1-3Y_t^2 right)dotY_t right)dt + sigma dW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The diffusion can be called with","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"@load_diffusion :FitzHughNagumoConjug","category":"page"},{"location":"examples/fitzhugh_nagumo/#Auxiliary-diffusions-1","page":"FitzHugh-Nagumo model","title":"Auxiliary diffusions","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"Additionally, we defined  linear diffusions that can be taken as auxiliary processes in the setting of Guided proposals.","category":"page"},{"location":"examples/fitzhugh_nagumo/#For-regular-parametrisation-1","page":"FitzHugh-Nagumo model","title":"For regular parametrisation","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The proposal is taken to be a guided proposal with auxiliary law (Image: equation) induced by the linear diffusion obtained by linearising FitzHugh-Nagumo diffusion at an end-point:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd widetildeY_t = frac1epsilonleft( left( 1-3y_T^2 right )widetildeY_t - widetildeX_t + s + 2y_T^3 right)dt\ndwidetildeX_t = left( gamma widetildeY_t - widetildeX_t + beta right)dt + sigma dW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#For-alternative-parametrisation-1","page":"FitzHugh-Nagumo model","title":"For alternative parametrisation","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#Simple-1","page":"FitzHugh-Nagumo model","title":"Simple","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The auxiliary law (Image: equation) is now induced by a pair: (I,B), where B is a scaled Brownian motion and I is an integrated B:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd I_t = B_tdt\ndB_t = fracsigmaepsilondW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#Linearisation-at-the-end-point-1","page":"FitzHugh-Nagumo model","title":"Linearisation at the end-point","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"The stochastic differential equation solved by the target process is the same as in :simpleAlter. However, the auxliary law (Image: equation) is induced by a two-dimensional diffusion, where the second coordinate is a linear diffusion obtained from linearising (Image: equation) at an end-point and the first coordinate is an integrated second coordinate. If only the first coordinate is observed the proposal takes a form:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\ndwidetildeY_t = widetildeX_t dt\ndwidetildeX_t = frac1epsilonleft left( 1-gamma-3y_T^2 right )widetildeY_t +left( 1-epsilon-3y_T^2 right )widetildeX_t + left(2y_T^3+s-beta right )right dt + fracsigmaepsilondW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"On the other hand, if both coordinates are observed, the proposal is given by:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\ndwidetildeY_t = widetildeX_t dt\ndwidetildeX_t = frac1epsilonleft left( 1-gamma-3y_T^2 - 6y_Tdoty_T right )widetildeY_t +left( 1-epsilon -3y_T^2 right )widetildeX_t + left(2y_T^3+s-beta + 6y_T^2doty_T right )right dt + fracsigmaepsilondW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#For-conjugate-parametrisation-1","page":"FitzHugh-Nagumo model","title":"For conjugate parametrisation","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#Simple-2","page":"FitzHugh-Nagumo model","title":"Simple","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"And the proposal law:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\nd I_t = B_tdt\ndB_t = sigma dW_t\nendalign*","category":"page"},{"location":"examples/fitzhugh_nagumo/#Linearisation-at-the-end-point-2","page":"FitzHugh-Nagumo model","title":"Linearisation at the end-point","text":"","category":"section"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"It is defined analogously to :complexAlter, the only difference being that an additional step is taken of redefining the parameters (just as it was done in :simpleConjug above). Consequently the target law is as given above, in the section on :simpleConjug parametrisation, whereas proposal law is given by:","category":"page"},{"location":"examples/fitzhugh_nagumo/#","page":"FitzHugh-Nagumo model","title":"FitzHugh-Nagumo model","text":"beginalign*\ndwidetildeY_t = widetildeX_t dt\ndwidetildeX_t = left left epsilonleft(1-3y_T^2 - 6y_Tdoty_T right )-gamma right widetildeY_t +left epsilonleft( 1-3y_T^2 right)-1 right widetildeX_t + leftepsilonleft(2y_T^3+ 6y_T^2doty_T right ) +s-beta rightright dt + sigma dW_t\nendalign*","category":"page"},{"location":"examples/prokaryote/#Prokaryotic-autoregulatory-gene-network-1","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"","category":"section"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"dX_t = b(X_t)dt + sigma(X_t) dW_t","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"where","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"b(x)=left(beginmatrix\nc_3 x^4 - c_7 x^1\nc_4 x^1 + 2f(x) - c_8 x^3\ng(x)-f(x)\ng(x)\nendmatrixright)","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"with","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"beginalign*\nf(x)=c_6 x^3-05c_5x^2(x^2-1)\ng(x)=c_2(K-x^4)-c_1 x^3x^4\nendalign*","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"and","category":"page"},{"location":"examples/prokaryote/#","page":"Prokaryotic autoregulatory gene network","title":"Prokaryotic autoregulatory gene network","text":"sigma(x)","category":"page"},{"location":"#DiffusionDefinition.jl-1","page":"Home","title":"DiffusionDefinition.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"This is a small utility package for defining diffusion processes, created to work in conjunction with BridgeSDEInference.jl.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Modules = [DiffusionDefinition]","category":"page"},{"location":"#DiffusionDefinition.BoundedStateSpace","page":"Home","title":"DiffusionDefinition.BoundedStateSpace","text":"BoundedStateSpace{L,U} <: DiffusionStateSpace\n\nUpper and lower bounds imposed on the state-space of a diffusion process. L corresponds to lower bounds, U corresponds to upper bounds.\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.LowerBoundedStateSpace","page":"Home","title":"DiffusionDefinition.LowerBoundedStateSpace","text":"LowerBoundedStateSpace{T,S,N} <: DiffusionStateSpace\n\nLower bounds imposed on the state-space of a diffusion process. T is used to list the indices that have lower-bound restrictions, S indicates the values of the lower-bounds, N is the total number of coordinates with lower-bound restrictions\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.UnboundedStateSpace","page":"Home","title":"DiffusionDefinition.UnboundedStateSpace","text":"UnboundedStateSpace <: DiffusionStateSpace\n\nNo restrictions imposed on the state-space of the process (i.e. ℝᵈ)\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.UpperBoundedStateSpace","page":"Home","title":"DiffusionDefinition.UpperBoundedStateSpace","text":"UpperBoundedStateSpace{T,S,N} <: DiffusionStateSpace\n\nUpper bounds imposed on the state-space of a diffusion process. T is used to list the indices that have upper-bound restrictions, S indicates the values of the upper-bounds, N is the total number of coordinates with upper-bound restrictions\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.@diffusion_process-Tuple{Any,Expr,Vararg{Any,N} where N}","page":"Home","title":"DiffusionDefinition.@diffusion_process","text":"diffusion_process(name, ex::Expr, p...)\n\nDefines a diffusion process according to a template described in the documentation of the github repository: https://github.com/mmider/DiffusionDefinition.jl\n\n\n\n\n\n","category":"macro"},{"location":"#DiffusionDefinition.@load_diffusion-Tuple{Any}","page":"Home","title":"DiffusionDefinition.@load_diffusion","text":"load_diffusion(name)\n\nLoads the predefined diffusion process.\n\n\n\n\n\n","category":"macro"},{"location":"#DiffusionDefinition.@load_diffusion-Tuple{}","page":"Home","title":"DiffusionDefinition.@load_diffusion","text":"load_diffusion()\n\nDisplays available choices of predefined diffusion processes that can be loaded\n\n\n\n\n\n","category":"macro"},{"location":"#DiffusionDefinition.DiffusionProcess","page":"Home","title":"DiffusionDefinition.DiffusionProcess","text":"DiffusionProcess{T,DP,DW}\n\nTypes inheriting from DiffusionProcess define Ito diffusions. T denotes the datatype of each coordinate, DP the dimension of the stochastic process, DW the dimension of the Wiener process, SS lists the state space restrictions.\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.DiffusionStateSpace","page":"Home","title":"DiffusionDefinition.DiffusionStateSpace","text":"DiffusionDomain\n\nTypes inheriting from DiffusionStateSpace define the types of restrictions put on the state-space of the stochastic process.\n\n\n\n\n\n","category":"type"},{"location":"#DiffusionDefinition.LinearDiffusion","page":"Home","title":"DiffusionDefinition.LinearDiffusion","text":"LinearDiffusion{T,DP,DW,SS} <: DiffusionProcess{T,DP,DW,SS}\n\nTypes inheriting from LinearDiffusion define a linear Ito-type diffusion, i.e. solutions to stochastic differential equations of the form: dXₜ = (BₜXₜ + βₜ)dt + σₜdWₜ, t∈[0,T], X₀=x₀.\n\n\n\n\n\n","category":"type"},{"location":"#Base.Unicode.lowercase-Tuple{Symbol}","page":"Home","title":"Base.Unicode.lowercase","text":"lowercase(s::Symbol)\n\nLowercase all letters in a symbol\n\n\n\n\n\n","category":"method"},{"location":"#Base.eltype-Union{Tuple{DiffusionDefinition.DiffusionProcess{T,DP,DW,SS} where SS where DW where DP}, Tuple{T}} where T","page":"Home","title":"Base.eltype","text":"eltype(::DiffusionProcess{T}) where T = T\n\nReturn the datatype that each coordinate of the stochastic process is stored in.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition._symbol_in-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition._symbol_in","text":"_symbol_in(::Any, ::Any)\n\nReturn false by default i.e. if the first argument is not a symbol nor its quote\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition._symbol_in-Tuple{QuoteNode,Any}","page":"Home","title":"DiffusionDefinition._symbol_in","text":"_symbol_in(s::QuoteNode, symbols)\n\nCheck if quote of a symbol s is listed in a list of symbols symbols\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition._symbol_in-Tuple{Symbol,Any}","page":"Home","title":"DiffusionDefinition._symbol_in","text":"_symbol_in(s::Symbol, symbols)\n\nCheck if symbol s is listed in a list of symbols symbols\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.add_constdiff_function!-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition.add_constdiff_function!","text":"add_constdiff_function!(fns, p)\n\nAdd a definition of a function consdiff that indicates if the diffusion coefficient is constant\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.add_nonhypo_function!-Tuple{Any,Any,Any}","page":"Home","title":"DiffusionDefinition.add_nonhypo_function!","text":"add_nonhypo_function!(fns, line, p)\n\nAdd a definition of a function nonhypo that takes a current diffusion state x and returns the elliptic coordinates.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.add_phi_function!-Tuple{Expr,Array{Expr,1},Symbol,Symbol,Any}","page":"Home","title":"DiffusionDefinition.add_phi_function!","text":"add_phi_function!(expr::Expr, fns::Vector{Expr}, t::Symbol, x::Symbol, p)\n\nConstruct a phi function used for conjugate updates.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.bound_satisfied-Tuple{UnboundedStateSpace,Any}","page":"Home","title":"DiffusionDefinition.bound_satisfied","text":"bound_satisfied(::UnboundedStateSpace, x)\n\nNo restrictions, bounds satisfied by default\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.bound_satisfied-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{LowerBoundedStateSpace{T,S,N},Any}} where N where S where T","page":"Home","title":"DiffusionDefinition.bound_satisfied","text":"bound_satisfied(::LowerBoundedStateSpace{T,S,N}, x) where {T,S,N}\n\nChecks if all coordinates adhere to lower bound restrictions\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.bound_satisfied-Union{Tuple{N}, Tuple{S}, Tuple{T}, Tuple{UpperBoundedStateSpace{T,S,N},Any}} where N where S where T","page":"Home","title":"DiffusionDefinition.bound_satisfied","text":"bound_satisfied(::UpperBoundedStateSpace{T,S,N}, x) where {T,S,N}\n\nChecks if all coordinates adhere to upper bound restrictions\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.bound_satisfied-Union{Tuple{U}, Tuple{L}, Tuple{BoundedStateSpace{L,U},Any}} where U where L","page":"Home","title":"DiffusionDefinition.bound_satisfied","text":"bound_satisfied(::BoundedStateSpace{L,U}, x) where {L,U}\n\nChecks if all coordinates adhere to lower and upper bound restrictions\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.cleanup_param_names!-Tuple{Any,Symbol,Symbol,Any}","page":"Home","title":"DiffusionDefinition.cleanup_param_names!","text":"cleanup_param_names!(expr, t::Symbol, x::Symbol, params)\n\nA hepler function for cleaning up the names of variables in the definition of a phi function.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.createstruct-Tuple{Any,Any,Any}","page":"Home","title":"DiffusionDefinition.createstruct","text":"createstruct(abstract_type, name, params)\n\nCreate code that defines a struct defining a diffusion process.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.dimension-Union{Tuple{DiffusionDefinition.DiffusionProcess{T,DP,DW,SS} where SS}, Tuple{DW}, Tuple{DP}, Tuple{T}} where DW where DP where T","page":"Home","title":"DiffusionDefinition.dimension","text":"dimension(::DiffusionProcess{T,DP,DW})\n\nReturn dimension of the stochastic process and driving Brownian motion.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.fill_unspecified_with_defaults-Tuple{Any}","page":"Home","title":"DiffusionDefinition.fill_unspecified_with_defaults","text":"fill_unspecified_with_defaults(p)\n\nFill all unspecified variables with default values\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.fill_unspecified_with_defaults-Tuple{Val{:additional},Any}","page":"Home","title":"DiffusionDefinition.fill_unspecified_with_defaults","text":"fill_unspecified_with_defaults(::Val{:additional}, p)\n\nIf unspecified, there are no restriction on a state space, the volatility coefficient is assumed constant, the diffusion is not linear and the datatype of each coordinate is set to Float64.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.fill_unspecified_with_defaults-Tuple{Val{:dimensions},Any}","page":"Home","title":"DiffusionDefinition.fill_unspecified_with_defaults","text":"fill_unspecified_with_defaults(::Val{:dimensions}, p)\n\nIf unspecified, the dimension of the stochastic process and the driving Brownian motion is set to 1.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.get_name_stem-Tuple{Symbol,Any}","page":"Home","title":"DiffusionDefinition.get_name_stem","text":"get_name_stem(name_stem::Symbol, parameters)\n\nGet the stem of a name for a parameters and then add a disambiguation index. Underscore _ used in place of name is defaulted to p.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.highest_idx_used-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition.highest_idx_used","text":"highest_idx_used(name_stem, params)\n\nFind the highest disambiguation index that has been used thus far for a given name_stem.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_line!-Tuple{Val{:additional},Any,Any}","page":"Home","title":"DiffusionDefinition.parse_line!","text":"parse_line!(::Val{:additional}, line, p)\n\nParse a line that defines additional information about a diffusion process.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_line!-Tuple{Val{:conjugate},Any,Any}","page":"Home","title":"DiffusionDefinition.parse_line!","text":"parse_line!(::Val{:conjugate}, line, p)\n\nParse a line that defines conjugate updates.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_line!-Tuple{Val{:dimensions},Any,Any}","page":"Home","title":"DiffusionDefinition.parse_line!","text":"parse_line!(::Val{:dimensions}, line, p)\n\nParse a line that defines the dimension of a diffusion process and the driving Brownian motion.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_line!-Tuple{Val{:parameters},Any,Any}","page":"Home","title":"DiffusionDefinition.parse_line!","text":"parse_line!(::Val{:parameters}, line, p)\n\nParse a line that defines parameters of the diffusion. The line must be in a format:     name –> parameter-description\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_lines!-Tuple{Expr,Any,Any}","page":"Home","title":"DiffusionDefinition.parse_lines!","text":"parse_lines!(ex::Expr, p, condition)\n\nParse all lines of the expression ex, but process only those which satisfy condition. p is a passed-around structure that accumulates processed information.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_param_multi_names-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition.parse_param_multi_names","text":"parse_param_multi_names(line, p)\n\nParse a line that defines parameters of the diffusion. The line must be in one of the formats:     (pname1, pname2, ...) –> (numberofparameters, datatype)     (pname1, pname2, ...) –> datatype     (pname1, pname2, ...) –> (datatype1, datatype2, ...) In the former two cases defines number_of_parameters-many parameters, with names p_name1, p_name2, ... and of datatype type. In the last case the datatypes differ from parameter to parameter.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_param_single_name-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition.parse_param_single_name","text":"parse_param_single_name(line, p)\n\nParse a line that defines parameters of the diffusion. The line must be in one of the formats:     parametername –> (numberofparameters, datatype)     parametername –> datatype In the former case defines number_of_parameters-many parameters, with names parameter_namei and of datatype type. In the latter case defines a single parameters with name parameter_name and of type datatype.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.parse_process-Tuple{Any,Expr,Any}","page":"Home","title":"DiffusionDefinition.parse_process","text":"parse_process(name , ex::Expr, ::Any)\n\nParse a template defining a diffusion process, create a corresponding struct and specified functions, evaluate them in the environment of a package and then import the struct name to Main scope, in which the package has been imported to.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.prepare_abstract_type-NTuple{4,Any}","page":"Home","title":"DiffusionDefinition.prepare_abstract_type","text":"prepare_abstract_type(stem, dims, data_type, state_restr)\n\nCreate a string defining a parent, abstract type from its stem, the dimensions dims of the process and the driving Brownian motion, the datatype data_type of each coordinate and the restrictions on the state space state_restr.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.state_space-Union{Tuple{DiffusionDefinition.DiffusionProcess{T,DP,DW,SS}}, Tuple{SS}, Tuple{DW}, Tuple{DP}, Tuple{T}} where SS where DW where DP where T","page":"Home","title":"DiffusionDefinition.state_space","text":"state_space(::DiffusionProcess{T,DP,DW,SS})\n\nReturn the state space restrictions.\n\n\n\n\n\n","category":"method"},{"location":"#DiffusionDefinition.update_label-Tuple{Any,Any}","page":"Home","title":"DiffusionDefinition.update_label","text":"update_label(line, current_label)\n\nUpdate the label, which signifies what type of information a given line in a template is supposed to be encoding.\n\n\n\n\n\n","category":"method"},{"location":"examples/jansen_rit/#Jansen-Rit-model-1","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"","category":"section"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"beginequation*\n    beginaligned\n        d X_t = dot X_t d t  \n        d Y_t = dot Y_t d t  \n        d Z_t = dot Z_t d t \n        d dot X_t =   leftA a left(mu_x(t) + mboxSigm(Y_t - Z_t)right) - 2a dot X_t - a^2 X_tright d t + sigma_x d W^(1)_t\n        d dot Y_t =  leftA a left(mu_y(t) + C_2mboxSigm(C_1 X_t)right) - 2a dot Y_t - a^2 Y_tright d t + sigma_y d W^(2)_t\n        d dot Z_t =  leftB b left(mu_z(t) + C_4mboxSigm(C_3 X_t)right) - 2b dot Z_t - b^2 Z_tright d t + sigma_z d W^(3)_t\n    endaligned\nendequation*","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"with initial condition","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"(X_0Y_0Z_0 dot X_0 dot Y_0 dot Z_0)=(x_0y_0z_0 dot x_0 dot y_0 dot z_0) in R^6","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"where","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"mboxSigm(x) = fracnu_max1 + e^r(v_0 - x)","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"and","category":"page"},{"location":"examples/jansen_rit/#","page":"Jansen-Rit model","title":"Jansen-Rit model","text":"C_1 = C quad C_2 = 08C quad C_4 = C_3 = 025C","category":"page"}]
}
